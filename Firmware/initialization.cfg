[gcode_macro _PRINT_REPORT_miu]
gcode: 
    {% set var = printer["gcode_macro VAR"] %}
    {% set st = printer['gcode_macro var']['switchtime'] %}
    {% set ft = printer['gcode_macro var']['failuretime'] %}
    {% set rt = printer['gcode_macro var']['retrytime'] %}
    {% set progress = printer.virtual_sdcard.progress|float %}

    #{ action_respond_info("current print progress: %s" % (progress) ) }
    { action_respond_info("change color: %d times, failure %d, fixed %d" % (st,ft,rt) ) }

    {% if progress > 0.9 %} 
        {% set report = ((st-rt)*100/st) |float %}
        { action_respond_info("MZ AMS Printing success rate is %d percentage" % (report) ) }
    {% else %} 
    
    {% endif %} 
    
[gcode_macro _prepare_for_printing]
description:所有开始打印前的变量重置和状态设置代码，在starting_print代码最开始直接加入这个宏即可
gcode:
    	SET_GCODE_VARIABLE MACRO=var VARIABLE=state VALUE={1} ##更新为打印状态
        SET_GCODE_VARIABLE MACRO=var VARIABLE=purgeline VALUE={1} ##重置属性
        SET_GCODE_VARIABLE MACRO=var VARIABLE=switchtime VALUE={0} #复位统计数据
        SET_GCODE_VARIABLE MACRO=var VARIABLE=failuretime VALUE={0}
        SET_GCODE_VARIABLE MACRO=var VARIABLE=retrytime VALUE={0}

        reset_continue  #复位各通道耗材替代标记,初始状态全部为0
        {% set buffer= printer['gcode_macro var']['buffer_used'] %}
        
        {% if buffer == 1 %}
            buffer_start   #开启缓冲器
        {% endif %}
          
[gcode_macro get_Last_Extruder]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set _COLORS_VAR = printer["gcode_macro _COLORS_VAR"] %}
    {% set move_speed = printer.gcode_move.speed|float %}
    #{ action_respond_info("Fan speed: %s" % (fan_speed) ) }
    { action_respond_info("Last Extruder is: T%d " % (svv.lastextruder) )}
    { action_respond_info("KMS最后使用的是通道%d , 四不相最后使用的是通道%d" % (svv.lastextruder_kms,svv.lastextruder_four) )}
    #SAVE_VARIABLE VARIABLE=switchcolor_pre VALUE={1}
    {% if svv.lastextruder < 6 and svv.lastextruder > 1 %} 
        RESPOND TYPE=echo MSG="KMS激活" color="warning"
        wakeup WAKEUP={svv.lastextruder_kms}
        Set_Rotation
    {% elif  svv.lastextruder >5 and svv.lastextruder < 10 %} 
        RESPOND TYPE=echo MSG="四不相激活" color="warning"
    	DEFAULT_T0
    	SET_GCODE_VARIABLE MACRO=_COLORS_VAR VARIABLE=now_filament VALUE={svv.lastextruder_four}
        #_J_Tn T_FILAMENT={svv.lastextruder_four}
    {% endif %} 
    
    reset_continue
    # #M106 S{fan_speed*255|int}
    # { action_respond_info("move speed: %d" % (move_speed) ) }
    # G1 F{move_speed/2}
    RESPOND TYPE=echo MSG="初始化完毕" color="accent"

[force_move]
enable_force_move: true
       
#重写解锁电机的M84指令，然后设置当前位置（类似G92指定位置；强制设定低级运动学代码使用的打印头位置。）
#官方用法为：SET_KINEMATIC_POSITION [X=<值>] [Y=<值>] [Z=<值>]
#不指定坐标值就是等于当前面板上的坐标
[gcode_macro M84]
rename_existing: M84.1
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
  SET_STEPPER_ENABLE STEPPER=dual_carriage enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_y1 enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
  SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
  SET_STEPPER_ENABLE STEPPER=extruder enable=0
  SET_STEPPER_ENABLE STEPPER=extruder1 enable=0
  #电机数量记得对应更新
  SET_KINEMATIC_POSITION

#开机后设定当前位置（解锁保护）
# [delayed_gcode KINEMATIC_POSITION]
# initial_duration:8
# gcode:
#     M117 HAPPY PRINTING! NEVER FAILED!
#     get_Last_Extruder
#     #SYNC_EXTRUDER_MOTION EXTRUDER=my_extra_stepper MOTION_QUEUE=extruder
#     #SET_FILAMENT_SENSOR SENSOR=BMQ ENABLE=0
#     #G28
#     SET_KINEMATIC_POSITION

# This macro will allow you to type search_vars s={some word} from the terminal and
# it will respond with all of the matching items in the printer Object.
# Say I wanted to know what the name and path of for the value of the currently loaded bed
# mesh. I could do type search_vars s=profile in my terminal and it will respond with 
# any items containing the word ‘profile’.
# 
#   $ SEARCH_VARS s="profile"
#   // printer.bed_mesh.profile_name : default
#

[gcode_macro RESPOND]
rename_existing: BASE_RESPOND
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.PREFIX is defined %}
    {% set prefix = 'PREFIX=' + params.PREFIX|string %}
  {% endif %}

  {% if params.TYPE is defined %}
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}    
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          BASE_RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'command' or 'error'"
      {% endif %}
  {% endif %}
        
  {% if params.MSG is defined %}   
    {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.COLOR is defined %}
      {% set color = params.COLOR|lower %}

      {% if color in colors %}
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %}
  
      {% else %}
          BASE_RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
       
  {% endif %}
  BASE_RESPOND {prefix} {type} {msg}
  
[gcode_macro SEARCH_VARS]
# Search like 'SEARCH_VARS s="profile"'
gcode:
    {% if not params.S %}
        {action_respond_info("hmm.. try 'SEARCH_VARS s=\"profile\"'")}
    {% else %}
        {% set resultcount = namespace(total=0) %}
        {% set search = params.S|lower %}
        {% set ns = namespace() %}
        {% for item in printer  %}
            {% if ' ' in item %}
                {% set ns.path = ['printer', "['%s']" % (item), ''] %}
            {% else %}
                {% set ns.path = ['printer.', item, ''] %}   
            {% endif %} 
    
            {% if search in ns.path|lower %}
                { action_respond_info(ns.path|join) }
                {% set resultcount.total = 1 + resultcount.total %}
            {% endif %} 
    
            {% if printer[item].items() %}
                {% for childkey, child in printer[item].items() recursive %}
                    {% set ns.path = ns.path[:loop.depth|int + 1] %}
    
                    {% if ' ' in childkey %}
                        {% set null = ns.path.append("['%s']" % (childkey)) %}
                    {% else %}
                        {% set null = ns.path.append(".%s" % (childkey)) %}
                    {% endif %} 
    
                    {% if child is mapping  %}
                        { loop(child.items()) }
                    {% else %}
                        {% if search in ns.path|lower %}
                            { action_respond_info("%s : %s" % (ns.path|join, child)) }
                            {% set resultcount.total = 1 + resultcount.total %}
                        {% endif %} 
                    {% endif %} 
                    
                {% endfor %}
            {% endif %} 
        {% endfor %}
        {% if resultcount.total >= 1 %}
            {action_respond_info("found \"" + params.S + "\" " + resultcount.total|string +" times.")}
        {% else %}
            {action_respond_info("\"" + params.S + "\" not found.")}
        {% endif %} 
        {% set resultcount.total = 0|int %}
    {% endif %} 