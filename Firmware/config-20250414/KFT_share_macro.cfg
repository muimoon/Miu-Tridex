#you should never use T0/T1
[gcode_macro T2] 
gcode:
    T0
    _KFT TOOL=2

[gcode_macro T3] 
gcode:
    T0
    _KFT TOOL=3

[gcode_macro T4] 
gcode:
    T0
    _KFT TOOL=4

[gcode_macro T5] 
gcode:
    T0
    _KFT TOOL=5

[gcode_macro T6] 
gcode:
    T1
    _KFT TOOL=6

[gcode_macro T7] 
gcode:
    T1
    _KFT TOOL=7

[gcode_macro T8] 
gcode:
    T1
    _KFT TOOL=8

[gcode_macro T9] 
gcode:
    T1
    _KFT TOOL=9
   
[gcode_macro _KFT]
#variable_nownum:0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set num = params.TOOL|int %} 
    {% set con = svv['continue'~num] %} 
    RESPOND TYPE=command MSG=action:_KFT
    {% if con != num %}  
       {action_respond_info("T%d runout, intead tunnel used"% (num)) }
       {% if num < 6 and num > 1 %} 
           change_tool TOOL={con}
       {% elif  num >5 and num < 10 %} 
           _Tn T_FILAMENT={con}
       {% endif %} 
    {% else %} 
       {% if num < 6 and num > 1 %} 
           change_tool TOOL={num}
       {% elif  num >5 and num < 10 %} 
           _Tn T_FILAMENT={num}
       {% else %} 
           RESPOND TYPE=error MSG="In KFT, T0 and T1 should be ignore, please check your variables 'lastextruder'"
       {% endif %} 
    {% endif %} 


[gcode_macro breakout]
description: stop direct extruder 
gcode:
        {% if printer.toolhead.extruder == 'extruder' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=    
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        
[gcode_macro reback]
description: recover direct extruder 
gcode:
        {% if printer.toolhead.extruder == 'extruder' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder 
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
            
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}

#请根据个人的切刀位置来修改本段宏文件！By muimoon, 2025/04/03
[gcode_macro CUTTING_FIL] 
description: 使用切到切断耗材
variable_cut_x: -50         #切断的极限位置X
variable_cut_dual_carriage: 303        #切断的极限位置X
variable_x_standby: -43       
variable_dual_carriage_standby: 297        
variable_cut_safe: 22      #从切断到恢复至安全位置的位移量
variable_cut_y: 30          #切断的极限位置Y
variable_cut_z: 5         #安全的抬升z
variable_cut_retract: -1   #切断以后需要将耗材回抽一小段来帮助刀片回弹
gcode:  
        {% set dcvars = printer["gcode_macro DC_VARS"] %}
        {% set safe_yposition = dcvars.safe_yposition %}
        {% set act_z = printer.toolhead.position.z|float %} #记录当前高度
        RESPOND MSG="Cutting"
        
        G1 E-20 F3000 
        G91
        G1 z{cut_z} F2000 #抬高
        G90
         
       {% if printer.toolhead.extruder == 'extruder' %}
          RESPOND TYPE=error MSG={ "extruder: not have cut function"}
          G0 X{x_standby+5} F3000 #plus 5 is safe distance
          G0 Y{cut_y} F3000 
          G0 X{cut_x+cut_safe} F3000 #到达安全位置准备切
          G0 X{cut_x} F3000 #切
          G1 E{cut_retract} F3000 #回抽
          G0 X{cut_x+cut_safe} F3000 #再次回到安全位置
          G4 P200
          G92 E0
          G0 X{x_standby} F3000  #沿平台外缘移动

      {% elif (printer.toolhead.extruder) == 'extruder1' %}
          G0 X{dual_carriage_standby-cut_safe} F3000 #minus 5 is safe distance
          G0 Y{cut_y} F3000 #沿平台外缘移动
          G0 X{cut_dual_carriage-cut_safe} F3000 #到达安全位置准备切
          G0 X{cut_dual_carriage} F3000 #切
          G1 E{cut_retract} F3000 #回抽
          G0 X{cut_dual_carriage-cut_safe} F3000 #再次回到安全位置
          # G0 X280
          # G0 Y-7
          # G0 X298
          # G0 X280
          G0 Y{safe_yposition+2} F3000
          G4 P200
          G92 E0
          G0 X{dual_carriage_standby} F3000  
          
      {% else %}
          RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
      {% endif %}
      
      G0 z{act_z} F2000 #高度还原                                                                     

   