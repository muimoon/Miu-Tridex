#这是木子小阳的KMS和 唔，待定的四不相 再Tridex原程序基础上做的融合程序
# To use this config, the firmware should be compiled for the RP2040 with Klipper
#运行这个文件需要有刷好klipper的rp2040控制板
# after press "boot", connect rp2040 to PC, and copy the "klipper.uf2" file to it, wait for about 10~15s, then connect rp to your 3D-printer control board
#按下Boot然后连接rp2040到你的电脑,系统会识别出一个移动盘,把文件"klipper.uf2"复制到出现的移动盘里.静待10到15秒以后，就可以连接3D打印的上位机了
# See docs/Config_Reference.md for a description of parameters.
#详细描述文件请看Config_Reference.md

################## 重要！！！ ########################
################## Important！！！########################
##请务必把下面的这行代码放到你自己的print_start gcode里！！！然后取消前面的#号注释
##please add below section to your print_start gcode, and delete the "#" at the same time, don't forget!!!
#_prepare_for_printing
#########################################################


[include Var.cfg]                #All custom variables included, 包含所有的自定义参数
#[include NEW-MZ-KMS-Hardware.cfg]
#[include NEW-MZ-KMS-Rewind.cfg]
# [include bug_fix_v2.cfg]
# [include Filament_buffer_v2.cfg]
[include Filament_Continue_v2.cfg]


#以下代码是修正klipper里最大挤出长度限制,如有重复设定,请把它注释掉
[extruder]
max_extrude_only_distance: 2000.0
[extruder1]
max_extrude_only_distance: 2000.0

[display_status]

# [gcode_macro T0] 
# gcode:
#     M104 S0 T0
#     pause
#     RESPOND TYPE=error MSG="In KFT, T0 and T1 should be ignore, please check your variables 'lastextruder'"
# [gcode_macro T1] 
# gcode:
#     M104 S0 T1
#     pause
#     RESPOND TYPE=error MSG="In KFT, T0 and T1 should be ignore, please check your variables 'lastextruder'"

[gcode_macro T2] 
gcode:
    T0
    _KFT TOOL=2
 
    
[gcode_macro T3] 
gcode:
    T0
    _KFT TOOL=3

[gcode_macro T4] 
gcode:
    T0
    _KFT TOOL=4

[gcode_macro T5] 
gcode:
    T0
    _KFT TOOL=5
    
#挤出机切换配置,需要根据实际通道数量更新
# [gcode_macro _K0]                ##有几个通道就添加几个
# gcode:
#     {% set svv = printer.save_variables.variables %}
#     {% set con = svv.continue0 %}  
#     {% if con == 1 %}  
#        {action_respond_info("T0 intead tunnel used") }
#        change_tool TOOL={printer["gcode_macro var"].filament0}
#     {% else %} 
#        change_tool TOOL=0
#     {% endif %} 

# [gcode_macro _K1]
# gcode:
#     {% set svv = printer.save_variables.variables %}
#     {% set con = svv.continue1 %}  
#     {% if con == 1 %}  
#        {action_respond_info("k1 intead tunnel used") }
#        change_tool TOOL={printer["gcode_macro var"].filament1}
#     {% else %} 
#        change_tool TOOL=1
#     {% endif %} 

[gcode_macro _KFT]
#variable_nownum:0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set num = params.TOOL|int %} 
    {% set con = svv['continue'~num] %} 
    RESPOND TYPE=command MSG=action:_KFT
    {% if con != num %}  
       {action_respond_info("T%d runout, intead tunnel used"% (num)) }
       {% if num < 6 and num > 1 %} 
           change_tool TOOL={con}
       {% elif  num >5 and num < 10 %} 
           _Tn T_FILAMENT={con}
       {% endif %} 
    {% else %} 
       {% if num < 6 and num > 1 %} 
           change_tool TOOL={num}
       {% elif  num >5 and num < 10 %} 
           _Tn T_FILAMENT={num}
       {% else %} 
           RESPOND TYPE=error MSG="In KFT, T0 and T1 should be ignore, please check your variables 'lastextruder'"
       {% endif %} 
    {% endif %} 

# [gcode_macro _K2]
# gcode:
#     {% set svv = printer.save_variables.variables %}
#     {% set con = svv.continue %} 
#     {% if con != 2 %}
#        {action_respond_info("k2 intead tunnel used") }
#        change_tool TOOL={printer["gcode_macro var"].filament2}
#     {% else %} 
#        change_tool TOOL=2
#     {% endif %} 

##如果要添加新通道请参考模板修改X的内容↓↓↓ TX   continueX  filamentX   TOOL=X
#[gcode_macro TX]
#gcode:
#    {% set svv = printer.save_variables.variables %}
#    {% set con = svv.continueX %}  
#    {% if con == 1 %}  
#       {action_respond_info("TX intead tunnel used") }
#       change_tool TOOL={printer["gcode_macro var"].filamentX}
#    {% else %} 
#       change_tool TOOL=X
#    {% endif %} 
##如果要添加新通道请参考模板修改X的内容↑↑↑

[gcode_macro breakout]
description:中断近程挤出机的工作
gcode:
        {% if printer.toolhead.extruder == 'extruder' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=    
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        
[gcode_macro reback]
description:恢复近程挤出机的工作
gcode:
        {% if printer.toolhead.extruder == 'extruder' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder    
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1    
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        
[gcode_macro moveout]
description: 取消远程送料电机与近程挤出机的同步关系
             clear all the relationship between direct driver and bowden extruder
gcode:
        {% for num in range(2, ((printer["gcode_macro var"].tunnel)+1)) %}
           SYNC_EXTRUDER_MOTION EXTRUDER=k{num} MOTION_QUEUE=
        {% endfor %}
        #SET_STEPPER_ENABLE STEPPER=extruder enable=0    ## try to cool down other not working extrder
            
[gcode_macro wakeup]
description:开启近程挤出机与送料电机的同步关联
            wakeup the relationship between them
gcode:  
        {% set wakeup = params.WAKEUP|default(0)|int %}                                       ##获取需要唤醒的t{num}挤出机和进程挤出机
        moveout                                                                               ##中断/初始化所有的远程送料电机
 
        {% if printer.toolhead.extruder == 'extruder' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=k{wakeup} MOTION_QUEUE=extruder                         ##唤醒k{num}挤出机
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            SYNC_EXTRUDER_MOTION EXTRUDER=k{wakeup} MOTION_QUEUE=extruder1                         ##唤醒k{num}挤出机   
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        
        SET_GCODE_VARIABLE MACRO=CHANGE_TOOL VARIABLE=nownum VALUE={wakeup}                   ##修改当前耗材的值
        reback    
               
[gcode_macro CHANGE_TOOL]
variable_nownum:0
gcode:                              
     {% set svv = printer.save_variables.variables %}                                    ##获取断电时候的耗材的序号 “0、1、2、3”
     {% set svvc = svv.lastextruder_kms %}                                                ##变量名长度优化
     {% set TOOL = params.TOOL|default(nownum)|int %}                                    ##选择喷头
     {% set tm = svv['tm'~TOOL] %}  
     {% set ioused= printer['gcode_macro var']['inout_used'] %}
     {action_respond_info("当前选择为 %d号位耗材" % (TOOL))}                               ##显示文本
     RESPOND TYPE=command MSG=action:change_tool
     {% set inout = printer['filament_switch_sensor INOUT'].filament_detected %}         ##inout状态，判断耗材是否加载至喷头处
     {% set state= printer['gcode_macro var']['state'] %}				                 ##获取var中的state（处于打印任务时state=1，未处于打印任务时state=0）默认为0

    {% set switchtime= printer['gcode_macro var']['switchtime'] %}				

    # {% if state == 0 %}  
    #     {% if printer.homed_axes != 'XYZ' %}                          ##保护代码，防止非打印过程中的切换直接撞墙(因为我开机就启动了强制移动的代码)
    #           G28            #Home
    #     {% endif %}                                                    
    # {% endif %} 
    # {% if printer.homed_axes != 'XYZ' %}
    #     #Tridex home overide function will call T0 which will make some problem
    #     #so i have to force printer do nothing when user not home first
    #     RESPOND TYPE=echo MSG="Home first!!!"
    # {% else %}
        SET_GCODE_VARIABLE MACRO=var VARIABLE=runout VALUE={1} ##更新为进入change_tool命令
        #_colorhotup  #将进料和退料的加热代码，无论是否打印过程中，触发change_tool，都会进行温度判断
        #buffer_OFF
        M104 S{tm} T0
        {% if ioused==1 and inout == 0 %}                                               ##如果进程挤出机没有进料的话
                    {% if state == 1 %}  
                        pause                                             ##如果在打印中，先触发暂停
                    {% endif %}	
                    RESPOND TYPE=echo MSG="直接进料"
                    jinliao IN_NUM={TOOL}                                 ##加载选中的耗材                                                    
        {% else %}                                                        ##如果进程挤出机已经加载耗材的情况
              {% if TOOL != svvc %}                                       ##如果不等于断电时的耗材情况 
                    RESPOND TYPE=echo MSG="切换耗材"
                    {% if state == 1 and ioused==1 %}   
                        pause                                             ##如果在打印中，先触发暂停
                    {% endif %}	
                    wakeup WAKEUP={svvc}                                  ##唤醒近程挤出机与断电时的挤出机	
                    CUTTING_FIL                                           ##切刀
                    tuiliao OUT_NUM={svvc}                                ##退出上次耗材
                    G4 P200                                               ##留给断料检测传感器的检测延迟
                    {action_respond_info("耗材从 %s 切换到 %s 号位耗材" % (svvc, TOOL))}
                    jinliao IN_NUM={TOOL}                                 ##加载本次耗材
              {% else %}                                                  ##如果等于断电时的耗材情况,即不用触发耗材的切换程序,直接使用即可
                    RESPOND TYPE=echo MSG="无需切换"
                    wakeup WAKEUP={TOOL}                                  ##唤醒近程挤出机与tool挤出机
                    SET_GCODE_VARIABLE MACRO=var VARIABLE=purgeline VALUE={0} ##修正
                    {action_respond_info("目前加载的正是 %d 号位耗材" % (TOOL))}
              {% endif %}
         {% endif %}
    
         SAVE_VARIABLE VARIABLE=lastextruder VALUE={TOOL}              #耗材切换完成，最后触发外部文件并记录当前的挤出机TOOL的num号，mm
         #SAVE_VARIABLE VARIABLE=continue VALUE={fcons[svvc]}
         
         {% if TOOL < 6 %}
           SAVE_VARIABLE VARIABLE=lastextruder_kms VALUE={TOOL}
         {% endif %} 
         
         #SAVE_VARIABLE VARIABLE=switchcolor_pre VALUE={1}
         Set_Rotation                                               #耗材切换完成，最后触发外部文件并记录当前的挤出机的rotation_distance，mm
    
         {% if state == 1 %}                                   
              SET_GCODE_VARIABLE MACRO=var VARIABLE=runout VALUE={2}      ##更新为change_tool命令结束，命令只触发于打印阶段 
              SET_GCODE_VARIABLE MACRO=var VARIABLE=switchtime VALUE={switchtime + 1}
              _PRINT_REPORT_miu
              #buffer_start    ##激活缓冲器
         {% endif %}    
    # {% endif %}  
    RESPOND TYPE=echo MSG="换料完成" color="success"
    
[gcode_macro jinliao]
description:四模块进料								 							   
variable_tnum:0	                                                                    ##为retry_jinliao重试进料，提供次数参考		
variable_retries: 0                                                                 ##请勿修改 
variable_steps: 0                                                                   ##请勿修改 
variable_max_of_steps: 15                                                           ##您可以根据需要调整这个值(用于重复进料使用)
gcode:
    {% set svv = printer.save_variables.variables %}                                ###获取断电时候的耗材的序号 “0、1、2、3”
    {% set svvc = svv.lastextruder %}                                            ##获取变量中lastextruder的数值-svvc
    
    {% set tnum = params.IN_NUM|default(0)|int %}									##设置变量tnum用于选择预进料电机t0,t1,t2....
    {% set tm = svv['tm'~tnum] %} 
	{action_respond_info("当前为 %d号位颜色进料" % (tnum))}							  ##显示目前选择的通道数量
	{% set state= printer['gcode_macro var']['state'] %}							##获取var中的state（处于任务时state=1，未处于任务时state=0）默认为0 
    {% set ioused= printer['gcode_macro var']['inout_used'] %}
	{% set inout = printer['filament_switch_sensor INOUT'].filament_detected %}  	##设置变量inout获取近程挤出机是否进料
    RESPOND TYPE=command MSG=action:进料
	moveout				                                                            ##中断/初始化所有的远程送料电机-初始化所有远近挤出机

    {% if ioused ==1 and inout == 1 %}																##判断inout是否进料（1是进料，0是没进料）
    
        SAVE_VARIABLE VARIABLE=tempextruder VALUE={tnum}                            ##引入新的存盘变量，尽量让bug程序独立于主程序以外。New parameter insert, to make the bug marco indepandent. 
        {action_respond_info("❌进料失败，已有耗材存在，请先完成 %d 退料,再点击继续"% (svvc))}		##显示请先完成退料（因为已经加载耗材了，就无法在加载耗材了）
        M117 hotend material exist, can't load another                               ##发送消息到LCD屏。“显示一个材料存在，不能加载另一个”。
        ##buffer_off                                                                ##关闭缓冲器
        ##prevent_idle IN_NUM={tnum}                                                ##故障1排除宏，持续更新中 bug_fix marco, need to update later
        
    {% elif ioused == 1 and inout == 0 %}																		##如果近程挤出机没有加载耗材
        # yujinliao TNUM={TOOL}
        {action_respond_info("正在为您加载 %d号位耗材" % (tnum))}			                  ##显示正在加载耗材
        # SET_TMC_CURRENT STEPPER=t{tnum} CURRENT={printer["gcode_macro var"].runcurrent}     ##调用进料时电流
        wakeup WAKEUP={tnum}                                                                ##唤醒近程挤出机与送料挤出机	
        breakout                                                                            #停用近程挤出机
        G92 E0                                                                              ##重置当前挤出机坐标
        G1 E{printer["gcode_macro var"].s0} F{printer["gcode_macro var"].speed0}	        ##t0挤出机以s0的距离，speed0的速度工作
        reback                                                                              #恢复近程挤出机
        {action_respond_info("当正在为您加载 %d号位耗材:二次确认" % (tnum))}				   ##显示文本二次确认
        UPDATE_DELAYED_GCODE ID=retry_jinliao DURATION=1 						            ##启动延时GCODE，方便持续检测

    {% elif ioused == 0 %}

        {action_respond_info("正在为您加载 %d号位耗材" % (tnum))}			                  ##显示正在加载耗材
        # SET_TMC_CURRENT STEPPER=t{tnum} CURRENT={printer["gcode_macro var"].runcurrent}     ##调用进料时电流
        wakeup WAKEUP={tnum}                                                                ##唤醒近程挤出机与送料挤出机	
        breakout                                                                            #停用近程挤出机
        G92 E0                                                                              ##重置当前挤出机坐标
        G1 E{printer["gcode_macro var"].s0} F{printer["gcode_macro var"].speed0}	        ##t0挤出机以s0的距离，speed0的速度工作
        RESPOND TYPE=echo MSG="耗材即将进入热端"
        M104 S{tm} T0
        reback                                                                              #恢复近程挤出机
        G1 P200
        G1 E{printer["gcode_macro var"].purge} F200
        G1 P200
        G1 F2000
        RESPOND TYPE=echo MSG="加载结束"
    {% endif %}
    
[delayed_gcode retry_jinliao]
initial_duration: 0
gcode:
    {% set tnum = printer['gcode_macro jinliao']['tnum'] %}                               ##获取jinliao中的tnum便于调整打印期间的电流
    {% set retries = printer['gcode_macro jinliao']['retries'] %}                         ##获取jinliao中的retries重试次数
    {% set steps = printer['gcode_macro jinliao']['steps'] %}                             ##获取jinliao中的steps数量
    {% set max_of_steps = printer['gcode_macro jinliao']['max_of_steps'] %}               ##获取jinliao中的max_of_steps数量
	{% set state= printer['gcode_macro var']['state'] %}								  ##获取var中的state（处于任务时state=1，未处于任务时state=0）默认为0
    {% set inputoks= printer['gcode_macro var']['inputoks'] %}						      ##获取var中的inputoks（速度）
    {% set inputokspeed= printer['gcode_macro var']['inputokspeed'] %}					  ##获取var中的inputokspeed
	{% set purgeline= printer['gcode_macro var']['purgeline'] %}						  ##获取var中的purgeline（清除量长度）
	{% set inout = printer['filament_switch_sensor INOUT'].filament_detected %}		      ##设置变量inout获取近程挤出机是否进料
     
 	 	{% if inout == 0 %}          													  ##如果近程挤出没有检测到耗材，强制刷新持续时长
            UPDATE_DELAYED_GCODE ID=retry_jinliao DURATION=1							  ##启动延时GCODE，方便持续检测
            G92 E0                                                                           ##重置当前挤出机坐标
            G1 E{printer["gcode_macro var"].inputs} F{printer["gcode_macro var"].inputspeed} ##重复进料进料检测
            SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=steps VALUE={steps + 1}              ##修改jinliao中的steps数值，每次循环＋1(用于检测多次循环使用)
            {action_respond_info("⏳进料中......")}
            M117 Loading....
            G4 P100
                # #created by 7010, for too many times retries checking
                {% if steps > max_of_steps %}                                              ##如果重复执行次数大于MAX_of_STES时
                    UPDATE_DELAYED_GCODE ID=retry_jinliao DURATION=1                       ##则重复执行retry_jinliao
                    G92 E0                                                                 ##重置当前挤出机坐标
                    G1 E-{printer["gcode_macro var"].inputs * 3} F{printer["gcode_macro var"].inputspeed}  ##回抽一定距离，重复尝试，回抽的距离是步进距离 * 已经步进的次数
                    G4 P100
                    SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=steps VALUE=0                ##重置jinliao中的steps代码为0（勿动）
                    SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=retries VALUE={retries + 1}  ##修改jinliao中的retries+1多次报错保证代码（勿动）
                    {action_respond_info("重试 %d次" % (retries))}                          ##显示当前重复报错几次
                    UPDATE_DELAYED_GCODE ID=retry_jinliao DURATION=1                        ##仍然执行多次循环代码retry_jinliao
                      {% if retries > 6 %}                                                  ##如果重复执行次数大于MAX_of_STES时，且大于出报错最大限额，则需要用户修复
                          M104 S20                                                          ##设置挤出头温度
                          SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=retries VALUE=0         ##重置jinliao中的retries重新为0，多次报错保证代码（勿动）       
                          SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=steps VALUE=0           ##重置jinliao中的steps重新为0，多次报错保证代码（勿动）    
                          UPDATE_DELAYED_GCODE ID=retry_jinliao DURATION=0                  ##终止执行多次循环代码retry_jinliao
                          {action_respond_info("❌错误:插入失败,重试次数过多,等待用户修复")}   ##显示报错信息
                          #故障2排除宏，持续更新中 bug_fix marco, need to update later
                      {% endif %}
                 {% endif %}
	  	{% else %}                                                                          ##如果近程挤出机检测到耗材
        
            SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=retries VALUE=0                       ##重置jinliao中的retries重新为0，多次报错保证代码（勿动）
            SET_GCODE_VARIABLE MACRO=jinliao VARIABLE=steps VALUE=0                         ##重置jinliao中的steps重新为0，多次报错保证代码（勿动）
            {action_respond_info("✅已完成耗材加载")}										##显示已成功加载耗材
            M117 Load successful!                                                           ##发送消息到LCD屏。“加载成功”。
            G92 E0                                                                          ##重置当前挤出机坐标
            G1 E{inputoks} F{inputokspeed}                                                  ##进入近程挤出机二次加载阶段
            {action_respond_info("送料距离 %d次" % (inputoks))}                              ##显示当前重复报错几次
            # SET_TMC_CURRENT STEPPER=t{tnum} CURRENT={printer["gcode_macro var"].printcurrent} ##调用打印时的电流
            UPDATE_DELAYED_GCODE ID=retry_jinliao DURATION=0								##关闭延时GCODE（因为已经加载到位了）
              {% if state == 1 %}															##如果打印机处于任务中
                # ##排除便便代码↓
                #   {% if purgeline == 1 %}                                                   
                #       prime_line pu=30
                #       SET_GCODE_VARIABLE MACRO=var VARIABLE=purgeline VALUE={0}             ##重置属性
                #   {% endif %}
                # ##排除便便代码↑
                #   G92 E0
                #   G1 E{printer["gcode_macro var"].purge} F200
                #   G1 F200
                #   M117 Printing...                                                           ##发送消息到LCD屏。“打印”。
                resume																	       ##恢复打印
              {% endif %}
		{% endif %}

[gcode_macro tuiliao]
description:四模块退料								 	
variable_tnum:0
gcode:
    {% set tnum = params.OUT_NUM|default(0)|int %}									
    # {% set cas = printer['filament_switch_sensor cas'~ tnum].filament_detected %}
    # {% set cbs = printer['filament_switch_sensor cbs'~ tnum].filament_detected %}
	moveout																			##初始化所有远程挤出机
    #{action_respond_info("检测通道 %d" % (cas))}

    G92 E0
    # {% if cas == 0 %}
    #         {action_respond_info("⚠当前%d号位颜色长度过短已无法回抽" % (tnum))}
    #         {action_respond_info("颜色将通过喷嘴挤出剩余长度")}
    #         M117 extremly purge
    #         G1 E{printer["gcode_macro var"].extremely_purge} F{printer["gcode_macro var"].inputokspeed}
    #         #故障3排除宏，持续更新中 bug_fix marco, need to update later
    # {% else %}
    
            # {% if cbs == 1 %}						  
                {action_respond_info("正在为您退出 %d号位耗材" % (tnum))}		  				  
                M117 unloading...
                # SET_TMC_CURRENT STEPPER=t{tnum} CURRENT={printer["gcode_macro var"].runcurrent}         ##快速退料时的运行电流
                wakeup WAKEUP={tnum}																	##同时唤醒ex与远程挤出机同步工作
                #UNREWIND CURRENT_FILAMENT={tnum}                                                        ##指定端口停止电动回卷
                #G4 P500                                                                                 ##留给断料检测传感器的检测延迟
                #REWIND CURRENT_FILAMENT={tnum}                                                          ##指定端口开始电动回卷
                G1 E{printer["gcode_macro var"].fouts} F{printer["gcode_macro var"].foutspeed}          ##远近程挤出机以fouts的距离，foutspeed的速度工作
                G4 P200
                breakout  #stop direct driver
                RESPOND TYPE=echo MSG="耗材退出热端"
                G1 E{printer["gcode_macro var"].outs} F{printer["gcode_macro var"].outspeed}            ##远程挤出机以outs的距离，outspeed的速度工作
                G4 P200
                RESPOND TYPE=echo MSG="完成退料"
                # SET_TMC_CURRENT STEPPER=t{tnum} CURRENT={printer["gcode_macro var"].awaitcurrent}       ##结束速退料时的休眠电流
                #UNREWIND CURRENT_FILAMENT={tnum}                                                        ##指定端口停止电动回卷
            # {% else %}
            #     {action_respond_info("%d号位已退出，无需再次退出耗材" % (tnum))}							  
            # {% endif %}
       	
    # {% endif %}
    
[filament_switch_sensor INOUT]	#耗材开关传感器。支持使用开关传感器（如限位开关）进行耗材插入和耗尽检测。
pause_on_runout: False		    #请注意, 如果 pause_on_runout 为 False 并且没有定义
event_delay: 7                #事件之间的最小延迟时间（秒）,在这个时间段内触发的事件将被默许忽略。
switch_pin: ^toolboard_0:gpio20               #连接到检测开关的引脚。

[filament_switch_sensor INOUT1]	#耗材开关传感器。支持使用开关传感器（如限位开关）进行耗材插入和耗尽检测。
pause_on_runout: False		    #请注意, 如果 pause_on_runout 为 False 并且没有定义
event_delay: 7                #事件之间的最小延迟时间（秒）,在这个时间段内触发的事件将被默许忽略。
switch_pin: ^toolboard_1:LIMIT_2               #连接到检测开关的引脚。

##########################################################################################################################
##预升温↓↓↓↓↓↓##
##########################################################################################################################
[gcode_macro _colorhotup]
description:多色系统喷头升温								 ##中文注释
gcode:
	{% set temp = printer['gcode_macro var']['temp'] %}
	{% set PROBE_TEMP = temp %}                              ##设定打印头温度230
	{% set MAX_TEMP = PROBE_TEMP + 5 %}                     ##限制温度到上面那个温度加5度
	{% set ACTUAL_TEMP = printer.extruder.temperature %}    ##实际温度=打印机。喷头。当前温度            
	{% set TARGET_TEMP = printer.extruder.target %}         ##目标温度=打印机。喷头。目标温度          
	                   
	{% if TARGET_TEMP > PROBE_TEMP %}                     	##如果 目标温度》设定温度
        # { action_respond_info('设置目标温度 %.1fC 太高了, 正在降低至 %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
      	##显示文本(变量1，变量2)
        # M109 S{ PROBE_TEMP }									##温度为设定温度
	{% else %}
    	{% if ACTUAL_TEMP < PROBE_TEMP %}                   		 ##如果 实际温度<最低挤出温度
        	{action_respond_info('当前实际温度 %.1fC 太低了, 正在升温至 %.1fC' % (ACTUAL_TEMP, PROBE_TEMP)) }
        	##显示文本(变量1，变量2)
        	M109 S{ PROBE_TEMP }									##温度为设定温度
    	{% endif %}
	{% endif %}

##########################################################################################################################
##预升温↑↑↑↑↑↑##
##########################################################################################################################
##########################################################################################################################
